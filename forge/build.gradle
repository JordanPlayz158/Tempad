plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

loom {
    forge {
        mixinConfig "${mod_id}.mixins.json"
        mixinConfig "${mod_id}.forge.mixins.json"
        dataGen {
            mod "tempad"
        }
    }
    launches {
        data {
            arg "--existing", file("src/main/resources").absolutePath
        }
    }
}

dependencies {
    forge "net.minecraftforge:forge:${minecraft_version}-${rootProject.forge_version}"
    modImplementation "mezz.jei:jei-${minecraft_version}:${jei_version}"
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
    // modRuntimeOnly "mekanism:Mekanism:${mekanism_version}"// core
    // modRuntimeOnly "mekanism:Mekanism:${mekanism_version}:additions"// Mekanism: Addition
    // modRuntimeOnly "mekanism:Mekanism:${mekanism_version}:generators"// Mekanism: Generator
    // modRuntimeOnly "mekanism:Mekanism:${mekanism_version}:tools"// Mekanism: Tool
    modCompileOnly ("mcjty.theoneprobe:theoneprobe:${top_version}:api") {
        transitive = false
    }
    modRuntimeOnly ("mcjty.theoneprobe:theoneprobe:${top_version}") {
        transitive = false
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
    archivesBaseName = "${mod_id}-forge-${minecraft_version}"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("mods.toml") {
        expand "version": project.version
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.mod_id + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}